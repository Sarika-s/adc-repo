<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.10">
  <actions/>
  <description>This job has been created automatically from HCL ADC framework using Microservices with  Entity Model template with template name as jenkins_template_entity_model</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.SCMTrigger>
          <spec>H/2 * * * *</spec>
          <ignorePostCommitHooks>false</ignorePostCommitHooks>
        </hudson.triggers.SCMTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.30">
    <script> node(&apos;template.nodename&apos;) {

                stage(&apos;Stop Running Docker images&apos;) {
                echo &apos;Stopping the running docker images..&apos;
                sh returnStdout: true, script: &apos;&apos;&apos;docker stop `docker ps -qa`&apos;&apos;&apos;
        }

        stage(&apos;Code Checkout&apos;) {
               echo &apos;Checking out code...&apos;
               checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/template.branchname&apos;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &apos;template.gitcredentialsId&apos;, url: &apos;template.git.url&apos;]]])
        }


        stage(&apos;MS Code Build&apos;) {
                echo &apos;Building code...&apos;
                sh returnStdout: true, script: &apos;&apos;&apos;cd template.servicename
               mvn package -Pprod docker:build -DskipTests &apos;&apos;&apos;
        }

                stage(&apos;UI Code Build&apos;) {
                echo &apos;Building code...&apos;
                sh returnStdout: true, script: &apos;&apos;&apos;cd template.gatewayname
               mvn package -Pprod docker:build -DskipTests &apos;&apos;&apos;
        }


        stage(&apos;MS Code Analysis&apos;) {
                echo &apos;Analysing code for my-first-microservice...&apos;
                sh returnStdout: true, script: &apos;&apos;&apos;cd template.servicename
                mvn  -B -V -U -e sonar:sonar -Dsonar.host.url=\&apos;template.sonarurl\&apos;&apos;&apos;&apos;
        }
                 stage(&apos;UI Code Analysis&apos;) {
                echo &apos;Analysing code for my-first-microserviceUI...&apos;
                sh returnStdout: true, script: &apos;&apos;&apos;cd template.gatewayname
                mvn  -B -V -U -e sonar:sonar -Dsonar.host.url=\&apos;template.sonarurl\&apos;&apos;&apos;&apos;
        }


        stage(&apos;Running Docker image build and publish&apos;) {
                echo &apos;running the docker images...&apos;
                sh returnStdout: true, script: &apos;&apos;&apos;cd docker-compose
                                docker-compose up -d&apos;&apos;&apos;

                //echo &apos;Publishing image for my-first-microservice ..&apos;
                //sh returnStdout: true, script: &apos;&apos;&apos;cd my-first-microservice
                //mvn docker:push -DskipTests&apos;&apos;&apos;
        }

        stage(&apos;Nexus Artifacts upload&apos;) {
                echo &apos;Uploading template.servicename artifacts to nexus..&apos;
                                        //nexusArtifactUploader artifacts: [[artifactId: &apos;template.servicename&apos;, classifier: &apos;&apos;, file: &apos;template.servicename/target/template.servicename-0.0.1-SNAPSHOT.war&apos;, type: &apos;war&apos;]], credentialsId: &apos;template.nexuscred&apos;, groupId: &apos;com.hcl&apos;, nexusUrl: &apos;template.nexusurl&apos;, nexusVersion: &apos;nexus2&apos;, protocol: &apos;http&apos;, repository: &apos;Snapshots&apos;, version: &apos;0.0.1&apos;
       }


}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
</flow-definition>
